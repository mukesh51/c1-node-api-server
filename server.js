const Joi = require("joi");
const express = require("express");
const app = express();
var cors = require('cors')

app.use(cors());
// Adding Middleware to enable parsing of JSON objects.
// This middleware will be used in request processing pipeline.
app.use(express.json());

const movies = [
  {
    id: 1,
    title: "Terminator",
    genre: { _id: "5b21ca3eeb7f6fbccd471818", name: "Action" },
    numberInStock: 6,
    dailyRentalRate: 2.5,
    publishDate: "2018-01-03T19:04:28.809Z",
    liked: true
  },
  {
    id: 2,
    title: "Die Hard",
    genre: { _id: "5b21ca3eeb7f6fbccd471818", name: "Action" },
    numberInStock: 5,
    dailyRentalRate: 2.5
  },
  {
    id: 3,
    title: "Get Out",
    genre: { _id: "5b21ca3eeb7f6fbccd471820", name: "Thriller" },
    numberInStock: 8,
    dailyRentalRate: 3.5
  }
];

app.get("/", (req, res) => {
  res.send("Hello Express");
});

function validateMovie(movie) {
  const schema = {
    title: Joi.string().min(3).required(),
  };

  return Joi.validate(movie, schema);
}
app.get("/api/movies", (req, res) => {
  // In real projects, this will be fetched from a database via a spring boot service or any other implementations based on language of choice.
  // This can also make calls to some other end-points based on design.
  // For simplicity, we're defining an array.
  res.send(movies);
});

// Reading route parameters to find a specific movie
app.get("/api/movies/:id", (req, res) => {
  //Find the book in the given array
  const movie = movies.find((b) => b.id === parseInt(req.params.id));
  // If no movie found, respond back with status code 404 and update user.
  if (!movie) return res.status(404).send("Movie with given ID was not found");
  res.send(movie);
});

app.post("/api/movies", (req, res) => {
  // We're using Joi for validation.
  //Joi works on schema, which defines the shape of our object
  // For example our object should be a string, atleast 3 characters long and required.
  const { error } = validateMovie(req.body);
  // 400 Bad Request
  // Responding back with basic error message
  if (error) return res.status(400).send(error.details[0].message);

  const movie = {
    // This normally should be autogenerated in real applications by database.
    // For simplicity, we're getting the length of array and addiing 1 to incremente the id.
    id: movies.length + 1,
    title: req.body.title,
  };

  movies.push(movie);
  res.send(movie);
});

app.put("/api/movies/:id", (req, res) => {
  // Look up for the book, if not found return a 404
  const movie = movies.find((b) => b.id === parseInt(req.params.id));
  // If no book found, respond back with status code 404 and update user.
  if (!movie) return res.status(404).send("Movie with given ID was not found");

  const { error } = validateMovie(req.body);
  // 400 Bad Request
  // Responding back with basic error message
  if (error) return res.status(400).send(error.details[0].message);

  movie.title = req.body.title;
  console.log(req.body.title)
  res.send(movie);
});

app.delete("/api/movies/:id", (req, res) => {
  // Look up for the book, if not found return a 404
  const movie = movies.find((b) => b.id === parseInt(req.params.id));
  // If no book found, respond back with status code 404 and update user.
  if (!movie) return res.status(404).send("Movie with given ID was not found");

  const index = movies.indexOf(movie);
  movies.splice(index, 1);

  res.send(movie);
});

//Global object process has a property called env to which we can add our environment variable
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}`));
